@page "/serverinfo"

@using BFBMX.Service.Models
@using Helpers
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Diagnostics

@inject IHttpClientFactory ClientFactory
@inject HttpConfiguration HttpConfig

<h1>BF-BMX Web Server Info</h1>

<section>
    <p>@ServerResponse</p>
</section>

@code {
    public string? ServerResponse {get;set;}
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    public async Task GetMessage()
    {
        try 
        {
            HttpRequestMessage request = new(HttpMethod.Get, HttpConfig.ServerInfoEndpoint);
            request.Headers.Add("Accept", HttpConfig.AcceptHeader);
            request.Headers.Add("User-Agent", HttpConfig.UserAgentHeader);
            HttpClient client = ClientFactory.CreateClient();
            CancellationToken ct = HttpConfig.Cts.Token;
            HttpResponseMessage response = await client.SendAsync(request, ct);

            if (response.IsSuccessStatusCode)
            {
                using System.IO.Stream responseStream = await response.Content.ReadAsStreamAsync();
                ServerInfoObject serverInfo = await JsonSerializer.DeserializeAsync<ServerInfoObject>(responseStream, HttpConfig.JsonOptions);
                ServerResponse = serverInfo.ToString();
            }
            else
            {
                ServerResponse = $"{(int)response.StatusCode}: {response.ReasonPhrase}";
                shouldRender = false;
            }
            
            shouldRender = true;
        }
        catch (Exception ex)
        {
            /* 
             * Possible Exceptions from both HttpRequestMessage and HttpClient:
             * 
             * ArgumentNullException
             * InvalidOperationException
             * HttpRequestException
             * TaskCanceledException
             * OperationCanceledException
             * 
             * These need to be logged
             */

            Debug.WriteLine(ex.Message);
            shouldRender = false;
        }
    }

    override protected async Task OnInitializedAsync()
    {
        await GetMessage();
    }

    public struct ServerInfoObject
    {
        public string Version {get;set;}
        public override string ToString() => $"Version: {Version}";
    }
}
