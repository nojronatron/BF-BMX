@page "/byaidstation"

@using BFBMX.Service.Models
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Diagnostics

@inject IHttpClientFactory ClientFactory
@inject HttpConfiguration HttpConfig

@rendermode InteractiveServer

<h1>Aid Station Report</h1>

<section class="query-section">
    @if (!CanDisplayAidStationStats)
    {
        <article class="input-form">
            <label for="queryAidStation" class="cntr-data-heading">Enter Aid Station Name or Abbreviation</label>
            <input id="queryAidStation" type="text" class="bigfoot-text-input-cntr" @bind="QueryAidStation" />
            <button class="bigfoot-button-blue" @onclick="HandleGetAidStationStats">Get Aid Station Report</button>

            @if (string.IsNullOrWhiteSpace(InputValidationMessage) == false)
            {
                <p class="text-danger text-lg-center">@InputValidationMessage</p>
            }

        </article>
        <article class="as-list-container">
            <p class="cntr-data-heading">Available Aid Stations</p>
            <ul>
                @foreach (string aidStation in AidStationLookup.Keys)
                {
                    <li>@aidStation: @AidStationLookup[aidStation]</li>
                }
            </ul>
        </article>
    }
    else
    {
        <button class="bigfoot-button-blue" @onclick="HandleGetNewQuery">Click to query another Aid Station</button>
    }
</section>

<section class="overall-content">
    @if (IsResponseAnError)
    {
        <article>
            <p class="text-danger">Unable to retrieve data. Check your search input and try again later.</p>
            <p>@ResponseErrorMessage</p>
        </article>
    }
    @if(CanDisplayAidStationStats)
    {
        <article class="topline-container">
            @if (AllWinlinkIDs.Count() < 1)
            {
                <p class="no-wl-messages">No Winlink messages received from @(AidStationName) yet</p>
            }
            else
            {
                <p class="stat-section-title">@AidStationName data received as of @LastUpdated</p>
            }
        </article>
        <article class="statistics-container">

            @if(AllWinlinkIDs.Count > 0)
            {
                <div class="wl-id-container as-list-container data-container-common">
                    <p class="cntr-data-heading">Winlink IDs Received (@AllWinlinkIDs.Count())</p>
                    <ul>
                        @foreach(string wlID in AllWinlinkIDs)
                        {
                            <li>@wlID</li>
                        }
                    </ul>
                </div>
            }

            @if(MessageDateStamps.Count > 0)
            {
                <div class="wl-datestamps-container as-list-container data-container-common">
                        <p class="cntr-data-heading">Message Date Stamps (@MessageDateStamps.Count())</p>
                    <ul>
                        @foreach(DateTime datestamp in MessageDateStamps)
                        {
                            <li>@datestamp</li>
                        }
                    </ul>
                </div>
            }

            @if (BibsOtherAction.Count() > 0)
            {
                <div class="bibs-seen-unknown as-list-container data-container-common">
                    <p class="cntr-data-heading">Bibs With Other Status (@BibsOtherAction.Count())</p>
                    <ul>
                        @foreach (string bib in BibsOtherAction)
                        {
                            <li>@bib</li>
                        }
                    </ul>
                </div>
            }

            @if (HasBibData && CalculatedPopulation.Count() > 0)
            {
            <div class="data-container-common calc-pop-container">
                <p class="stat-title">Calculated Population (@CalculatedPopulation.Count())</p>
                @if(BibsArrived.Count() < BibsDeparted.Count())
                    {
                        <p class="text-danger cntr-data-heading">!! More OUT than IN !!</p>
                    }
                    <ul>
                    @foreach(int bib in CalculatedPopulation)
                    {
                        <li>@bib</li>
                    }
                </ul>
            </div>
            }

            @if (BibsDeparted.Count() > 0)
            {
                <div class="bibs-seen-out as-list-container data-container-common">
                    <p class="cntr-data-heading">Bibs Exited (@BibsDeparted.Count())</p>
                    <ul>
                        @foreach (int bib in BibsDeparted)
                        {
                            <li>@bib</li>
                        }
                    </ul>
                </div>
            }

            @if (BibsArrived.Count() > 0)
            {
                <div class="bibs-seen-in as-list-container data-container-common">
                    <p class="cntr-data-heading">Bibs Arrived (@BibsArrived.Count())</p>
                    <ul>
                        @foreach (int bib in BibsArrived)
                        {
                            <li>@bib</li>
                        }
                    </ul>
                </div>
            }

            @if (UniqueBibsSeen.Count() > 0)
            {
                <div class="bibs-reported-on as-list-container data-container-common">
                    <p class="cntr-data-heading">All Bibs Seen (@UniqueBibsSeen.Count())</p>
                    <ul>
                        @foreach (int bib in UniqueBibsSeen)
                        {
                            <li>@bib</li>
                        }
                    </ul>
                </div>
            }
        </article>
    }
</section>

@code {
    private Dictionary<string, string> AidStationLookup = new();
    private bool GetMessageError;

    public string LastUpdated { get; set; } = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
    public string AidStationName { get; set; } = "Not Set!";
    public string QueryAidStation { get; set; } = string.Empty;
    public string ResponseErrorMessage { get; set; } = string.Empty;
    public string InputValidationMessage { get; set; } = string.Empty;

    public int TotalBibsSeenCount => BibsArrived.Count() + BibsDeparted.Count() + BibsOtherAction.Count();

    public bool IsRequestSent { get; set; }
    public bool IsResponseAnError { get; set; }
    public bool CanDisplayAidStationStats { get; set; }
    public bool HasBibData => TotalBibsSeenCount > 0;

    public AidStationStatisticsModel? AidStationResponse { get; set; }
    public HashSet<string> AllWinlinkIDs { get; set; } = new(); // unique list of WL IDs received
    public SortedSet<DateTime> MessageDateStamps = new();
    public SortedSet<int> UniqueBibsSeen { get; set; } = new(); // which unique bib numbers HAS this AS reported on?
    public SortedSet<int> BibsArrived { get; set; } = new(); // unique bib numbers with action: IN
    public SortedSet<int> BibsDeparted { get; set; } = new(); // unique bib numbers with action: OUT
    public SortedSet<int> CalculatedPopulation { get; set; } = new(); // calculated list of bibs at this AS
    public List<string> BibsOtherAction { get; set; } = new(); // unique bib numbers with NEITHER action: IN nor OUT

    public void ClearDataFields()
    {
        AidStationResponse = null;
        UniqueBibsSeen.Clear();
        BibsArrived.Clear();
        BibsDeparted.Clear();
        BibsOtherAction.Clear();
        MessageDateStamps.Clear();
        AidStationName = string.Empty;
        AllWinlinkIDs.Clear();
        CalculatedPopulation.Clear();
        QueryAidStation = string.Empty;
        ResponseErrorMessage = string.Empty;
        IsResponseAnError = false;
    }

    public void HandleGetNewQuery()
    {
        ClearDataFields();
        IsRequestSent = false;
        IsResponseAnError = false;
        CanDisplayAidStationStats = false;
    }

    public async Task HandleGetAidStationStats()
    {
        try
        {
            InputValidationMessage = string.Empty;

            if (QueryAidStation.Length < 2)
            {
                ClearDataFields();
                InputValidationMessage = "Enter a valid Aid Station abbreviation";
                return;
            }

            string queryAidStationEndpoint = string.Concat(HttpConfig.AidStationEndpoint, "/", QueryAidStation);
            HttpRequestMessage request = new(HttpMethod.Get, queryAidStationEndpoint);
            request.Headers.Add("Accept", HttpConfig.AcceptHeader);
            request.Headers.Add("User-Agent", HttpConfig.UserAgentHeader);
            HttpClient client = ClientFactory.CreateClient();
            CancellationToken ct = HttpConfig.Cts.Token;
            HttpResponseMessage response = await client.SendAsync(request, ct);

            if (response.IsSuccessStatusCode)
            {
                using System.IO.Stream responseStream = await response.Content.ReadAsStreamAsync();
                AidStationResponse = await JsonSerializer.DeserializeAsync<AidStationStatisticsModel>(responseStream, HttpConfig.JsonOptions);
                IsRequestSent = true;
            }
            else
            {
                ResponseErrorMessage = $"{(int)response.StatusCode} {response.ReasonPhrase}";
                IsResponseAnError = true;
            }

            if (IsResponseAnError)
            {
                CanDisplayAidStationStats = false;
            }
            else
            {
                LoadWinlinkMessageMetaData();
                AidStationName = AidStationResponse!.AidStationName;
                LoadBibsReportedOn();
                GetCalculatedPopulation();
                CanDisplayAidStationStats = true;
            }
        }
        catch (Exception ex)
        {
            /*
            * Possible Exceptions from both HttpRequestMessage and HttpClient:
            *
            * ArgumentNullException
            * InvalidOperationException
            * HttpRequestException
            * TaskCanceledException
            * OperationCanceledException
            *
            * These need to be logged
            */

            Debug.WriteLine($"{ex.Message}\n{ex.StackTrace}");
            IsResponseAnError = true;
            ResponseErrorMessage = ex.Message;
            CanDisplayAidStationStats = !IsResponseAnError;
            // await a delay of 4 seconds before calling ClearDataFields()
            ClearDataFields();
        }

    }

    public void GetCalculatedPopulation()
    {
        foreach(var bib in BibsArrived)
        {
            if (!BibsDeparted.Contains(bib))
            {
                CalculatedPopulation.Add(bib);
            }
        }
    }

    public void LoadBibsReportedOn()
    {
        foreach(WinlinkMessageModel winlinkMessage in AidStationResponse!.WinlinkMessages)
        {
            foreach(FlaggedBibRecordModel bibRecord in winlinkMessage.BibRecords)
            {
                if (int.TryParse(bibRecord.BibNumber, out int bibnum))
                {
                    UniqueBibsSeen.Add(bibnum);

                    if (bibRecord.Action == "IN")
                    {
                        BibsArrived.Add(bibnum);
                    }
                    else if (bibRecord.Action == "OUT")
                    {
                        BibsDeparted.Add(bibnum);
                    }
                    else
                    {
                        BibsOtherAction.Add(bibRecord.BibNumber);
                    }
                }
                else
                {
                    BibsOtherAction.Add(bibRecord.BibNumber ?? "Error!");
                }
            }
        }
    }

    public void LoadWinlinkMessageMetaData()
    {
        foreach(WinlinkMessageModel winlinkMessage in AidStationResponse!.WinlinkMessages)
        {
            MessageDateStamps.Add(winlinkMessage.MessageDateStamp);
            AllWinlinkIDs.Add(winlinkMessage.WinlinkMessageId ?? "Error!");
        }
    }

    override protected async Task OnInitializedAsync()
    {
        AidStationLookup.Add("MM", "Marble Mountain");
        AidStationLookup.Add("BL", "Blue Lake");
        AidStationLookup.Add("AC", "Ape Canyon");
        AidStationLookup.Add("WR", "Windy Ridge");
        AidStationLookup.Add("JR", "Johnston Ridge");
        AidStationLookup.Add("CW", "Coldwater Lake");
        AidStationLookup.Add("NP", "Norway Pass");
        AidStationLookup.Add("EP", "Elk Pass");
        AidStationLookup.Add("WM", "Wright Meadow (Rd.9327");
        AidStationLookup.Add("SB", "Spencer Butte");
        AidStationLookup.Add("LR", "Lewis River");
        AidStationLookup.Add("CB", "Council Bluff");
        AidStationLookup.Add("QR", "Quartz Ridge");
        AidStationLookup.Add("CL", "Chain of Lakes");
        AidStationLookup.Add("KT", "Klikitat");
        AidStationLookup.Add("TS", "Twin Sisters");
        AidStationLookup.Add("OC", "Owen's Creek");
        AidStationLookup.Add("FN", "Finish (Bigfoot Base)");

        await base.OnInitializedAsync();
    }
}
