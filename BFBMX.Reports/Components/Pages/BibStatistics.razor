@page "/bibstatistics"

@using BFBMX.Service.Models
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Diagnostics

@inject IHttpClientFactory ClientFactory
@inject HttpConfiguration HttpConfig

<h1>Bib Statistics</h1>
<p class="bib-stat-byline">As Of @LastUpdated</p>

@if (GetMessageError)
{
    <p>Unable to retrieve data. Try again later.</p>
}
else
{
    <section class="bf-card-container-h">
        <article class="bf-wl-msg-card">
            <div class="bf-wl-msg-card-heading">Overall Statistics</div>
            <div class="bf-wl-msg-props-container">
                <div>
                    <span class="bf-wl-msg-card-key">Aid Station Reports:</span>
                    <span class="bf-wl-msg-card-value">@TotalMessages</span>
                </div>

                <div>
                    <span class="bf-wl-msg-card-key">BF200 Records Processed:</span>
                    <span class="bf-wl-msg-card-value">@BigFootRecordsCount</span>
                </div>

                <div>
                    <span class="bf-wl-msg-card-key">20M and 40M Records Processed:</span>
                    <span class="bf-wl-msg-card-value">@LittleFeetRecordsCount</span>
                </div>

                <div>
                    <span class="bf-wl-msg-card-key">Total Unique Bibs Seen:</span>
                    <span class="bf-wl-msg-card-value">@TotalBibsSeenCount</span>
                </div>
            </div>
        </article>

        <article class="bf-wl-msg-card">
            <div class="bf-wl-msg-card-heading">Records To Research</div>
            <div class="bf-csv-records-container">
                @foreach (var item in UnknownItems)
                {
                    <div class="bf-csv-bib-record bf-warning-record">@item</div>
                }
            </div>
        </article>

        <article class="bf-wl-msg-card">
            <div class="bf-wl-msg-card-heading">200M Bibs</div>
            <div class="bf-wl-msg-props-container">
                <div>
                    <span class="bf-wl-msg-card-key">Count:</span>
                    <span class="br-wl-msg-card-value">@BigFootBibsSeenCount</span>
                </div>
            </div>
            <div class="bf-csv-records-container">
                <div class="bf-csv-bib-record bf-nominal-record">@BigFootBibsSeen</div>
            </div>
        </article>

        <article class="bf-wl-msg-card">
            <div class="bf-wl-msg-card-heading">20M and 40M Bibs</div>
            <div class="bf-wl-msg-props-container">
                <div>
                    <span class="bf-wl-msg-card-key">Count:</span>
                    <span class="br-wl-msg-card-value">@LittleFeetBibsSeenCount</span>
                </div>
            </div>
            <div class="bf-csv-records-container">
                <div class="bf-csv-bib-record bf-nominal-record">@LittleFeetBibsSeen</div>
            </div>
        </article>
    </section>

    <section class="def-container">
        <h3 class="def-heading">Definitions</h3>
        <p class="def-item"><em>Messages From Aid Stations</em>: How many messages an Aid Station has sent via HAM that contain information about runners.</p>
        <p class="def-item"><em>BF200 Records Processed</em>: The number of individual records of 200-mile runner actions such as IN, OUT, or DROP.</p>
        <p class="def-item"><em>20M andn 40M Records Processed</em>: The sum of all 20-mile runner and 40-mile runner individual records of actions (IN, OUT, or DROP).</p>
        <p class="def-item"><em>Total Unique Bibs Seen</em>: Represents the number if <em>unique individual runners</em> seen on-course.</p>
        <p class="def-item"><em>Processed Bib Records to Research</em>: HAMs use this pst to uncover erroneous records and get them corrected. Common errors are mis-keyed data, or missing data components.</p>
        <p class="def-item"><em>BF200 Bibs Seen</em>: A count of unique bib numbers seen by HAMs, and an ordered list of those bib numbers.</p>
        <p class="def-item"><em>20M and 40M Bibs Seen</em>: A count of unique bib numbers seen by HAMs, and an ordered list of those bib numbers.</p>
    </section>
}

@code {
    public BibRecordsStatisticsModel? Statistics {get;set;}
    public string LastUpdated {get;set;} = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
    public string TotalMessages {get;set;} = string.Empty;
    public string BigFootRecordsCount {get;set;} = string.Empty;
    public string LittleFeetRecordsCount {get;set;} = string.Empty;
    public List<string> UnknownItems {get;set;} = new();
    public string BigFootBibsSeen {get;set;} = string.Empty;
    public string LittleFeetBibsSeen {get;set;} = string.Empty;

    private bool GetMessageError;
    private bool PageShouldRender;

    public int BigFootBibsSeenCount => Statistics?.BigFootBibNumbersSeen.Count() ?? 0;
    public int LittleFeetBibsSeenCount => Statistics?.LittleFeetBibNumbersSeen.Count() ?? 0;
    public int TotalBibsSeenCount => Statistics?.BigFootBibNumbersSeen.Count() + Statistics?.LittleFeetBibNumbersSeen.Count() ?? 0;

    protected override bool ShouldRender() => PageShouldRender;

    private void FormatBibsSeen()
    {
        if (Statistics.BigFootBibNumbersSeen.Count() > 0)
        {
            List<int> sortedBibNumbers = Statistics.BigFootBibNumbersSeen.OrderBy(x => x).ToList();
            StringBuilder sb = new();

            foreach (var bib in sortedBibNumbers)
            {
                sb.Append($"{bib}, ");
            }

            sb.Remove(sb.Length - 2, 2);
            BigFootBibsSeen = sb.ToString();
        }
        else
        {
            BigFootBibsSeen = $"None processed as of {LastUpdated}";
        }

        if (Statistics.LittleFeetBibNumbersSeen.Count() > 0)
        {
            List<int> sortedBibNumbers = Statistics.LittleFeetBibNumbersSeen.OrderBy(x => x).ToList();
            StringBuilder sb = new();

            foreach (var bib in sortedBibNumbers)
            {
                sb.Append($"{bib}, ");
            }

            sb.Remove(sb.Length - 2, 2);
            LittleFeetBibsSeen = sb.ToString();
        }
        else
        {
            LittleFeetBibsSeen = $"None processed as of {LastUpdated}";
        }
    }

    private void FormatLittleFeetRecordsCount()
    {
        LittleFeetRecordsCount = Statistics.LittleFootBibRecordsProcessed > 0
            ? Statistics.LittleFootBibRecordsProcessed.ToString()
            : "None";
    }

    private void FormatBigFootRecordsCount()
    {
        BigFootRecordsCount = Statistics.BigFootBibRecordsProcessed > 0
            ? Statistics.BigFootBibRecordsProcessed.ToString()
            : "None";
    }

    private void FormatTotalMessagesProcessed() 
    {
        TotalMessages = Statistics.TotalWinlinkMessagesProcessed > 0
            ? Statistics.TotalWinlinkMessagesProcessed.ToString()
            : "None";
    }

    private void FormatUnknownItems()
    {
        if (Statistics.UnknownBibDataItems.Count() > 0)
        {
            foreach(FlaggedBibRecordModel item in Statistics.UnknownBibDataItems)
            {
                UnknownItems.Add(item.ToCommaSeparatedString());
            }
        }
        else
        {
            UnknownItems.Add($"None processed as of {LastUpdated}");
        }
    }

    public async Task GetStatistics()
    {
        try
        {
            HttpRequestMessage request = new(HttpMethod.Get, HttpConfig.StatisticsEndpoint);
            request.Headers.Add("Accept", HttpConfig.AcceptHeader);
            request.Headers.Add("User-Agent", HttpConfig.UserAgentHeader);
            HttpClient client = ClientFactory.CreateClient();
            CancellationToken ct = HttpConfig.Cts.Token;
            HttpResponseMessage response = await client.SendAsync(request, ct);

            if (response.IsSuccessStatusCode)
            {
                using System.IO.Stream responseStream = await response.Content.ReadAsStreamAsync();
                Statistics = await JsonSerializer.DeserializeAsync<BibRecordsStatisticsModel>(responseStream, HttpConfig.JsonOptions);
                FormatTotalMessagesProcessed();
                FormatBigFootRecordsCount();
                FormatLittleFeetRecordsCount();
                FormatUnknownItems();
                FormatBibsSeen();
            }
            else
            {
                GetMessageError = true;
            }
        }
        catch (Exception ex)
        {
            /* 
             * Possible Exceptions from both HttpRequestMessage and HttpClient:
             * 
             * ArgumentNullException
             * InvalidOperationException
             * HttpRequestException
             * TaskCanceledException
             * OperationCanceledException
             * 
             * These need to be logged
             */

            Debug.WriteLine($"{ex.Message}\n{ex.StackTrace}");
            GetMessageError = true;
            PageShouldRender = false;
        }

        PageShouldRender = true;
    }

    override protected async Task OnInitializedAsync()
    {
        await GetStatistics();
    }
}
